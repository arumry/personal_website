---
export interface Props {
  showSectionNav?: boolean;
}

const { showSectionNav = false } = Astro.props;
---

<nav id="header" class="w-full fixed top-0 left-0 z-[9998] bg-primary shadow-xl">
  <div class="w-full max-w-7xl mx-auto flex items-center justify-between px-5 md:px-8 lg:px-12 py-4">
    <a href="/" class="text-white text-sm sm:text-base md:text-lg font-mono flex-shrink-0 flex items-center min-h-[48px]">
      <span class="text-blue-400">Profile</span><span class="text-purple-400">::</span><span class="text-yellow-300">aaron_rumery</span><span class="text-purple-400">()</span><span class="text-purple-400">;</span>
    </a>

    <!-- Desktop Navigation -->
    <ul id="navigation-menu" class="hidden lg:flex lg:items-center lg:gap-4 xl:gap-7 text-sm">
      <li>
        <a id="home-nav-link" href="/" class="text-white group flex flex-nowrap items-center hover:text-secondary">
          <span class="text-secondary opacity-0 translate-y-5 group-hover:opacity-100 group-hover:translate-y-0 transition-all">&#60;</span>Home
          <span class="text-secondary opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all flex items-center pt-0.5"><span class="text-[11px]">/</span>&#62;</span>
        </a>
      </li>
      <li>
        <a href="/blog" class="text-white group flex flex-nowrap items-center hover:text-secondary">
          <span class="text-secondary opacity-0 translate-y-5 group-hover:opacity-100 group-hover:translate-y-0 transition-all">&#60;</span>Blog
          <span class="text-secondary opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all flex items-center pt-0.5"><span class="text-[11px]">/</span>&#62;</span>
        </a>
      </li>
      <li class="w-fit h-fit overflow-visible">
        <div class="w-fit h-fit bg-secondary rounded">
          <a
            href="/resume.pdf"
            target="_blank"
            class="text-secondary bg-primary px-3 py-1 md:px-4 md:py-1.5 lg:px-8 lg:py-2.5 text-sm md:text-xs font-semibold lg:font-bold flex gap-3 items-center transition-all hover:translate-x-0.5 hover:-translate-y-0.5 whitespace-nowrap cursor-pointer border rounded border-secondary"
          >
            Resume
          </a>
        </div>
      </li>
    </ul>

    <!-- Mobile Menu Button - Optimized touch target -->
    <button
      id="mobile-menu-button"
      class="block lg:hidden flex-shrink-0 min-h-[48px] min-w-[48px] p-3 rounded-lg hover:bg-primary_light transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary"
      aria-label="Toggle mobile menu"
      aria-expanded="false"
    >
      <svg id="menu-icon" class="w-6 h-6 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
      <svg id="close-icon" class="w-6 h-6 text-secondary hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

  </div>
</nav>

<!-- Mobile Navigation Menu - Optimized for touch interaction -->
<ul id="mobile-navigation-menu" class="fixed top-[72px] left-0 right-0 flex flex-col items-center w-full lg:hidden bg-primary z-[9997] px-5 gap-6 transition-all duration-300 ease-in-out h-0 overflow-hidden opacity-0">
    <li class="w-full max-w-xs">
      <a
        id="mobile-home-nav-link"
        href="/"
        class="text-white group flex flex-nowrap items-center justify-center hover:text-secondary min-h-[48px] px-6 py-4 rounded-lg hover:bg-primary_light transition-all duration-200 text-lg font-medium focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary"
        aria-label="Navigate to home page"
      >
        <span class="text-secondary opacity-0 translate-y-5 group-hover:opacity-100 group-hover:translate-y-0 transition-all">&#60;</span>Home
        <span class="text-secondary opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all flex items-center pt-0.5"><span class="text-[11px]">/</span>&#62;</span>
      </a>
    </li>
    <li class="w-full max-w-xs">
      <a
        href="/blog"
        class="text-white group flex flex-nowrap items-center justify-center hover:text-secondary min-h-[48px] px-6 py-4 rounded-lg hover:bg-primary_light transition-all duration-200 text-lg font-medium focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary"
        aria-label="Navigate to blog"
      >
        <span class="text-secondary opacity-0 translate-y-5 group-hover:opacity-100 group-hover:translate-y-0 transition-all">&#60;</span>Blog
        <span class="text-secondary opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all flex items-center pt-0.5"><span class="text-[11px]">/</span>&#62;</span>
      </a>
    </li>
    <li class="w-full max-w-xs">
      <div class="w-full bg-secondary rounded-lg overflow-visible shadow-lg">
        <a
          href="/resume.pdf"
          target="_blank"
          aria-label="Download resume PDF"
          class="text-secondary bg-primary min-h-[48px] px-6 py-4 text-lg font-semibold flex gap-3 items-center justify-center transition-all duration-300 hover:translate-x-0.5 hover:-translate-y-0.5 whitespace-nowrap cursor-pointer border-2 rounded-lg border-secondary hover:border-tertiary focus:outline-none focus:ring-2 focus:ring-tertiary focus:ring-offset-2 focus:ring-offset-primary"
        >
          Resume
        </a>
      </div>
    </li>
  </ul>

<!-- Section Navigation Menu (Only visible when showSectionNav is true) -->
<nav id="section-nav-container" class={showSectionNav ? "section-nav" : "hidden"} aria-label="Section navigation">
  <!-- Simplified Floating Action Button -->
  <button
    id="section-nav-toggle"
    class="section-nav-fab"
    type="button"
    aria-label="Open section navigation menu"
    aria-expanded="false"
    aria-controls="section-nav-menu"
    aria-haspopup="menu"
  >
    <!-- Code brackets icon -->
    <svg
      class="section-nav-icon"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      aria-hidden="true"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3"></path>
    </svg>
  </button>

  <!-- Simplified Section Navigation Menu -->
  <div
    id="section-nav-menu"
    class="section-nav-menu"
    role="menu"
    aria-labelledby="section-nav-toggle"
  >
    <!-- Introduction -->
    <a href="#introduction-section" class="section-nav-link" role="menuitem">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3"></path>
      </svg>
      <span>./introduction</span>
    </a>

    <!-- Services -->
    <a href="#services-section" class="section-nav-link" role="menuitem">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
      </svg>
      <span>services()</span>
    </a>

    <!-- Experience -->
    <a href="#experience-section" class="section-nav-link" role="menuitem">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
      </svg>
      <span>my_experience</span>
    </a>

    <!-- Projects -->
    <a href="#projects-section" class="section-nav-link" role="menuitem">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
      </svg>
      <span>projects[]</span>
    </a>

    <!-- Contact -->
    <a href="#contact-section" class="section-nav-link" role="menuitem">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
      </svg>
      <span>contact.me</span>
    </a>
  </div>
</nav>

<script>
  // Header mobile menu functionality
  let mobileMenuOpen = false;

  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileNavigationMenu = document.getElementById('mobile-navigation-menu');
  const menuIcon = document.getElementById('menu-icon');
  const closeIcon = document.getElementById('close-icon');
  const homeNavLink = document.getElementById('home-nav-link');
  const mobileHomeNavLink = document.getElementById('mobile-home-nav-link');

  const sectionNavToggle = document.getElementById('section-nav-toggle');
  const sectionNavMenu = document.getElementById('section-nav-menu');

  // Determine if we're on the home page for context-aware home link behavior
  const isHomePage = window.location.pathname === '/';

  // Context-aware home link behavior
  function handleHomeLinkClick(e: Event) {
    if (isHomePage) {
      e.preventDefault();
      // Scroll to top smoothly
      window.scrollTo({ top: 0, behavior: 'smooth' });
      if (mobileMenuOpen) {
        toggleMobileMenu();
      }
    }
    // On other pages, let the default link behavior work (navigate to /)
  }

  if (homeNavLink) {
    homeNavLink.addEventListener('click', handleHomeLinkClick);
  }

  if (mobileHomeNavLink) {
    mobileHomeNavLink.addEventListener('click', handleHomeLinkClick);
  }

  // Simplified Section Navigation - Modern Implementation
  if (sectionNavToggle && sectionNavMenu) {
    // Simple toggle function
    const toggleMenu = () => {
      const isOpen = sectionNavToggle.getAttribute('aria-expanded') === 'true';

      if (isOpen) {
        // Close menu
        sectionNavToggle.setAttribute('aria-expanded', 'false');
        sectionNavMenu.classList.remove('section-nav-menu--open');
        sectionNavToggle.classList.remove('section-nav-fab--active');
      } else {
        // Open menu
        sectionNavToggle.setAttribute('aria-expanded', 'true');
        sectionNavMenu.classList.add('section-nav-menu--open');
        sectionNavToggle.classList.add('section-nav-fab--active');

        // Focus first menu item for accessibility
        const firstLink = sectionNavMenu.querySelector('.section-nav-link') as HTMLElement;
        if (firstLink) {
          setTimeout(() => firstLink.focus(), 100);
        }
      }
    };

    // Event listeners
    sectionNavToggle.addEventListener('click', toggleMenu);

    // Keyboard support
    sectionNavToggle.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        toggleMenu();
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (e.target &&
          !sectionNavToggle.contains(e.target as Node) &&
          !sectionNavMenu.contains(e.target as Node)) {
        if (sectionNavToggle.getAttribute('aria-expanded') === 'true') {
          toggleMenu();
        }
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && sectionNavToggle.getAttribute('aria-expanded') === 'true') {
        toggleMenu();
        sectionNavToggle.focus();
      }
    });

    // Handle navigation links with simple, reliable click handling
    const navLinks = sectionNavMenu.querySelectorAll('.section-nav-link');
    navLinks.forEach((link, index) => {
      // Simple navigation function
      const handleNavigation = (e: Event) => {
        e.preventDefault(); // Prevent default anchor behavior

        if (sectionNavToggle.getAttribute('aria-expanded') === 'true') {
          // Get the target section ID from href
          const href = (link as HTMLAnchorElement).getAttribute('href');

          // Close menu first
          toggleMenu();

          // Implement explicit scrolling after menu closes
          if (href && href.startsWith('#')) {
            const targetElement = document.querySelector(href);
            if (targetElement) {
              // Wait for menu close animation to complete
              setTimeout(() => {
                targetElement.scrollIntoView({
                  behavior: 'smooth',
                  block: 'start'
                });
              }, 300); // Match the nav-transition duration
            }
          }
        }
      };

      // Single click event listener with mobile browser optimizations
      link.addEventListener('click', handleNavigation);

      // Mobile browser compatibility enhancements
      const linkElement = link as HTMLElement;

      // Prevent iOS Safari from showing the callout menu
      (linkElement.style as any).webkitTouchCallout = 'none';

      // Ensure proper touch action for mobile browsers
      linkElement.style.touchAction = 'manipulation';

      // Clear any persistent focus states on touch devices
      link.addEventListener('touchstart', () => {
        (link as HTMLElement).style.outline = 'none';
        (link as HTMLElement).style.backgroundColor = 'transparent';
      }, { passive: true });

      // Clear focus after touch interaction completes
      link.addEventListener('touchend', () => {
        setTimeout(() => {
          (link as HTMLElement).blur();
        }, 50);
      }, { passive: true });

      // Keyboard navigation within menu
      link.addEventListener('keydown', (e) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === 'ArrowDown') {
          keyEvent.preventDefault();
          const nextLink = navLinks[index + 1] || navLinks[0];
          (nextLink as HTMLElement).focus();
        } else if (keyEvent.key === 'ArrowUp') {
          keyEvent.preventDefault();
          const prevLink = navLinks[index - 1] || navLinks[navLinks.length - 1];
          (prevLink as HTMLElement).focus();
        } else if (keyEvent.key === 'Escape') {
          keyEvent.preventDefault();
          toggleMenu();
          sectionNavToggle.focus();
        } else if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
          keyEvent.preventDefault();
          handleNavigation(keyEvent);
        }
      });
    });
  }



  // Mobile menu toggle
  function toggleMobileMenu() {
    mobileMenuOpen = !mobileMenuOpen;

    if (mobileMenuOpen) {
      mobileNavigationMenu?.classList.remove('h-0', 'opacity-0');
      mobileNavigationMenu?.classList.add('h-80', 'py-8', 'opacity-100');
      menuIcon?.classList.add('hidden');
      closeIcon?.classList.remove('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'true');
    } else {
      mobileNavigationMenu?.classList.add('h-0', 'opacity-0');
      mobileNavigationMenu?.classList.remove('h-80', 'py-8', 'opacity-100');
      menuIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    }
  }

  // Enhanced mobile menu toggle with touch support
  const handleMobileMenuToggle = (e: Event) => {
    e.preventDefault(); // Prevent any default behavior
    toggleMobileMenu();
  };

  // Add both click and touch event listeners for mobile menu button
  mobileMenuButton?.addEventListener('click', handleMobileMenuToggle);
  mobileMenuButton?.addEventListener('touchend', handleMobileMenuToggle);

  // Prevent touch scrolling issues
  mobileMenuButton?.addEventListener('touchstart', (e) => {
    e.stopPropagation();
  });

  // Mobile menu button keyboard support
  mobileMenuButton?.addEventListener('keydown', (e) => {
    const keyEvent = e as KeyboardEvent;
    if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
      keyEvent.preventDefault();
      toggleMobileMenu();
    } else if (keyEvent.key === 'Escape' && mobileMenuOpen) {
      keyEvent.preventDefault();
      toggleMobileMenu();
      mobileMenuButton?.focus();
    }
  });

  // Close mobile menu when clicking on navigation links
  const navLinks = mobileNavigationMenu?.querySelectorAll('a');
  navLinks?.forEach(link => {
    link.addEventListener('click', () => {
      if (mobileMenuOpen) {
        toggleMobileMenu();
      }
    });
  });
</script>
