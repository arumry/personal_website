---
export interface Props {
  showSectionNav?: boolean;
}

const { showSectionNav = false } = Astro.props;
---

<nav id="header" class="w-full fixed top-0 left-0 z-[9998] bg-primary shadow-xl">
  <div class="w-full max-w-7xl mx-auto flex items-center justify-between px-5 md:px-8 lg:px-12 py-4">
    <a href="/" class="text-white text-sm sm:text-base md:text-lg font-mono flex-shrink-0">
      <span class="text-blue-400">Profile</span><span class="text-purple-400">::</span><span class="text-yellow-300">aaron_rumery</span><span class="text-purple-400">()</span><span class="text-purple-400">;</span>
    </a>

    <!-- Desktop Navigation -->
    <ul id="navigation-menu" class="hidden lg:flex lg:items-center lg:gap-4 xl:gap-7 text-sm">
      <li>
        <a id="home-nav-link" href="/" class="text-white group flex flex-nowrap items-center hover:text-secondary">
          <span class="text-secondary opacity-0 translate-y-5 group-hover:opacity-100 group-hover:translate-y-0 transition-all">&#60;</span>Home
          <span class="text-secondary opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all flex items-center pt-0.5"><span class="text-[11px]">/</span>&#62;</span>
        </a>
      </li>
      <li>
        <a href="/blog" class="text-white group flex flex-nowrap items-center hover:text-secondary">
          <span class="text-secondary opacity-0 translate-y-5 group-hover:opacity-100 group-hover:translate-y-0 transition-all">&#60;</span>Blog
          <span class="text-secondary opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all flex items-center pt-0.5"><span class="text-[11px]">/</span>&#62;</span>
        </a>
      </li>
      <li class="w-fit h-fit overflow-visible">
        <div class="w-fit h-fit bg-secondary rounded">
          <a
            href="/resume.pdf"
            target="_blank"
            class="text-secondary bg-primary px-3 py-1 md:px-4 md:py-1.5 lg:px-8 lg:py-2.5 text-sm md:text-xs font-semibold lg:font-bold flex gap-3 items-center transition-all hover:translate-x-0.5 hover:-translate-y-0.5 whitespace-nowrap cursor-pointer border rounded border-secondary"
          >
            Resume
          </a>
        </div>
      </li>
    </ul>

    <!-- Mobile Menu Button - Optimized touch target -->
    <button
      id="mobile-menu-button"
      class="block lg:hidden flex-shrink-0 min-h-[48px] min-w-[48px] p-3 rounded-lg hover:bg-primary_light transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary"
      aria-label="Toggle mobile menu"
      aria-expanded="false"
    >
      <svg id="menu-icon" class="w-6 h-6 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
      <svg id="close-icon" class="w-6 h-6 text-secondary hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

  </div>
</nav>

<!-- Mobile Navigation Menu - Optimized for touch interaction -->
<ul id="mobile-navigation-menu" class="fixed top-[72px] left-0 right-0 flex flex-col items-center w-full lg:hidden bg-primary z-[9997] px-5 gap-6 transition-all duration-300 ease-in-out h-0 overflow-hidden opacity-0">
    <li class="w-full max-w-xs">
      <a
        id="mobile-home-nav-link"
        href="/"
        class="text-white group flex flex-nowrap items-center justify-center hover:text-secondary min-h-[48px] px-6 py-4 rounded-lg hover:bg-primary_light transition-all duration-200 text-lg font-medium focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary"
        aria-label="Navigate to home page"
      >
        <span class="text-secondary opacity-0 translate-y-5 group-hover:opacity-100 group-hover:translate-y-0 transition-all">&#60;</span>Home
        <span class="text-secondary opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all flex items-center pt-0.5"><span class="text-[11px]">/</span>&#62;</span>
      </a>
    </li>
    <li class="w-full max-w-xs">
      <a
        href="/blog"
        class="text-white group flex flex-nowrap items-center justify-center hover:text-secondary min-h-[48px] px-6 py-4 rounded-lg hover:bg-primary_light transition-all duration-200 text-lg font-medium focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary"
        aria-label="Navigate to blog"
      >
        <span class="text-secondary opacity-0 translate-y-5 group-hover:opacity-100 group-hover:translate-y-0 transition-all">&#60;</span>Blog
        <span class="text-secondary opacity-0 translate-y-1 group-hover:opacity-100 group-hover:translate-y-0 transition-all flex items-center pt-0.5"><span class="text-[11px]">/</span>&#62;</span>
      </a>
    </li>
    <li class="w-full max-w-xs">
      <div class="w-full bg-secondary rounded-lg overflow-visible shadow-lg">
        <a
          href="/resume.pdf"
          target="_blank"
          aria-label="Download resume PDF"
          class="text-secondary bg-primary min-h-[48px] px-6 py-4 text-lg font-semibold flex gap-3 items-center justify-center transition-all duration-300 hover:translate-x-0.5 hover:-translate-y-0.5 whitespace-nowrap cursor-pointer border-2 rounded-lg border-secondary hover:border-tertiary focus:outline-none focus:ring-2 focus:ring-tertiary focus:ring-offset-2 focus:ring-offset-primary"
        >
          Resume
        </a>
      </div>
    </li>
  </ul>

<!-- Section Navigation Menu (Only visible when showSectionNav is true) -->
<div id="section-nav-container" class={showSectionNav ? "" : "hidden"}>
  <!-- Modern Floating Action Button for Section Navigation - Responsive -->
  <button
    id="section-nav-toggle"
    class="fixed bottom-4 right-4 sm:bottom-6 sm:right-6 z-[9999] w-14 h-14 sm:w-16 sm:h-16 bg-gradient-to-br from-secondary to-blue-500 hover:from-tertiary hover:to-yellow-400 text-primary rounded-2xl shadow-2xl hover:shadow-[0_20px_40px_rgba(80,175,239,0.3)] transition-all duration-500 flex items-center justify-center group transform hover:scale-105 active:scale-95 border border-secondary/20 backdrop-blur-sm touch-manipulation fab-pulse"
    aria-label="Navigate to sections"
    aria-expanded="false"
  >
    <!-- Code brackets icon with enhanced animation -->
    <div class="relative">
      <svg
        id="fab-icon"
        class="w-6 h-6 sm:w-7 sm:h-7 transition-all duration-500 group-hover:scale-110"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        stroke-width="2.5"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M8 9l3 3-3 3m5 0h3"
          class="transition-all duration-500 group-hover:stroke-[3]"
        />
      </svg>
      <!-- Enhanced glow effect for activation state -->
      <div
        id="fab-glow"
        class="absolute inset-0 bg-secondary/30 rounded-full blur-md opacity-0 transition-all duration-500"
      ></div>
    </div>
  </button>

  <!-- Enhanced Section Navigation Menu - Responsive -->
  <div
    id="section-nav-menu"
    class="fixed bottom-20 right-4 sm:bottom-28 sm:right-6 z-[9998] bg-primary_light/95 backdrop-blur-md border border-secondary/30 rounded-2xl shadow-2xl p-3 min-w-[200px] sm:min-w-[220px] max-w-[calc(100vw-2rem)] transform scale-0 origin-bottom-right transition-all duration-500"
  >
    <nav class="flex flex-col gap-1">
      <!-- Introduction - Terminal/Console icon -->
      <a href="#introduction-section" class="section-nav-link flex items-center gap-3 min-h-[48px] sm:min-h-[52px] px-3 sm:px-4 py-3 text-white hover:text-secondary hover:bg-primary/50 rounded-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary_light group touch-manipulation" style="transform: translateX(20px) scale(0.95); opacity: 0.7;">
        <svg class="w-5 h-5 flex-shrink-0 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3"></path>
        </svg>
        <span class="text-sm font-medium code-font">./introduction</span>
      </a>

      <!-- Services - Code/Function icon -->
      <a href="#services-section" class="section-nav-link flex items-center gap-3 min-h-[48px] sm:min-h-[52px] px-3 sm:px-4 py-3 text-white hover:text-secondary hover:bg-primary/50 rounded-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary_light group touch-manipulation" style="transform: translateX(20px) scale(0.95); opacity: 0.7;">
        <svg class="w-5 h-5 flex-shrink-0 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
        </svg>
        <span class="text-sm font-medium code-font">services()</span>
      </a>

      <!-- Experience - User/Developer icon -->
      <a href="#experience-section" class="section-nav-link flex items-center gap-3 min-h-[48px] sm:min-h-[52px] px-3 sm:px-4 py-3 text-white hover:text-secondary hover:bg-primary/50 rounded-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary_light group touch-manipulation" style="transform: translateX(20px) scale(0.95); opacity: 0.7;">
        <svg class="w-5 h-5 flex-shrink-0 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
        </svg>
        <span class="text-sm font-medium code-font">my_experience</span>
      </a>

      <!-- Projects - Git branch/Repository icon -->
      <a href="#projects-section" class="section-nav-link flex items-center gap-3 min-h-[48px] sm:min-h-[52px] px-3 sm:px-4 py-3 text-white hover:text-secondary hover:bg-primary/50 rounded-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary_light group touch-manipulation" style="transform: translateX(20px) scale(0.95); opacity: 0.7;">
        <svg class="w-5 h-5 flex-shrink-0 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
        </svg>
        <span class="text-sm font-medium code-font">projects[]</span>
      </a>

      <!-- Contact - Mail/Communication icon -->
      <a href="#contact-section" class="section-nav-link flex items-center gap-3 min-h-[48px] sm:min-h-[52px] px-3 sm:px-4 py-3 text-white hover:text-secondary hover:bg-primary/50 rounded-xl transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 focus:ring-offset-primary_light group touch-manipulation" style="transform: translateX(20px) scale(0.95); opacity: 0.7;">
        <svg class="w-5 h-5 flex-shrink-0 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
        </svg>
        <span class="text-sm font-medium code-font">contact.me</span>
      </a>
    </nav>
  </div>
</div>

<script>
  // Header mobile menu functionality
  let mobileMenuOpen = false;
  let sectionNavOpen = false;

  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileNavigationMenu = document.getElementById('mobile-navigation-menu');
  const menuIcon = document.getElementById('menu-icon');
  const closeIcon = document.getElementById('close-icon');
  const homeNavLink = document.getElementById('home-nav-link');
  const mobileHomeNavLink = document.getElementById('mobile-home-nav-link');

  const sectionNavToggle = document.getElementById('section-nav-toggle');
  const sectionNavMenu = document.getElementById('section-nav-menu');

  // Determine if we're on the home page for context-aware home link behavior
  const isHomePage = window.location.pathname === '/';

  // Context-aware home link behavior
  function handleHomeLinkClick(e: Event) {
    if (isHomePage) {
      e.preventDefault();
      // Scroll to top smoothly
      window.scrollTo({ top: 0, behavior: 'smooth' });
      if (mobileMenuOpen) {
        toggleMobileMenu();
      }
    }
    // On other pages, let the default link behavior work (navigate to /)
  }

  if (homeNavLink) {
    homeNavLink.addEventListener('click', handleHomeLinkClick);
  }

  if (mobileHomeNavLink) {
    mobileHomeNavLink.addEventListener('click', handleHomeLinkClick);
  }

  // Enhanced section navigation toggle with improved animations and accessibility
  if (sectionNavToggle && sectionNavMenu) {
    const fabIcon = document.getElementById('fab-icon');
    const fabGlow = document.getElementById('fab-glow');

    // Function to open menu
    const openMenu = () => {
      sectionNavOpen = true;
      sectionNavToggle.setAttribute('aria-expanded', 'true');
      sectionNavToggle.classList.remove('fab-pulse'); // Stop pulse animation
      sectionNavMenu.classList.remove('scale-0');
      sectionNavMenu.classList.add('scale-100');

      // Enhanced activation animation: scale + glow instead of rotation
      sectionNavToggle.style.transform = 'scale(1.15)';
      if (fabIcon) {
        fabIcon.style.transform = 'scale(1.2)';
        fabIcon.style.filter = 'drop-shadow(0 0 8px rgba(80, 175, 239, 0.6))';
      }
      if (fabGlow) {
        fabGlow.style.opacity = '1';
        fabGlow.style.transform = 'scale(1.5)';
      }

      // Animate menu items with stagger
      const menuItems = sectionNavMenu.querySelectorAll('.section-nav-link');
      menuItems.forEach((item, index) => {
        setTimeout(() => {
          (item as HTMLElement).style.transform = 'translateX(0) scale(1)';
          (item as HTMLElement).style.opacity = '1';
        }, index * 50);
      });

      // Focus first menu item for keyboard navigation
      setTimeout(() => {
        const firstLink = sectionNavMenu.querySelector('.section-nav-link') as HTMLElement;
        if (firstLink) firstLink.focus();
      }, 100);
    };

    // Function to close menu
    const closeMenu = () => {
      sectionNavOpen = false;
      sectionNavToggle.setAttribute('aria-expanded', 'false');
      sectionNavToggle.classList.add('fab-pulse'); // Resume pulse animation
      sectionNavMenu.classList.add('scale-0');
      sectionNavMenu.classList.remove('scale-100');

      // Reset to normal state with smooth transition
      sectionNavToggle.style.transform = 'scale(1)';
      if (fabIcon) {
        fabIcon.style.transform = 'scale(1)';
        fabIcon.style.filter = 'none';
      }
      if (fabGlow) {
        fabGlow.style.opacity = '0';
        fabGlow.style.transform = 'scale(1)';
      }

      // Reset menu items
      const menuItems = sectionNavMenu.querySelectorAll('.section-nav-link');
      menuItems.forEach((item) => {
        (item as HTMLElement).style.transform = 'translateX(20px) scale(0.95)';
        (item as HTMLElement).style.opacity = '0.7';
      });
    };

    // Shared toggle function for both click and touch events
    const toggleMenu = (e: Event) => {
      e.preventDefault(); // Prevent any default behavior
      if (sectionNavOpen) {
        closeMenu();
      } else {
        openMenu();
      }
    };

    // Add both click and touch event listeners for maximum compatibility
    sectionNavToggle.addEventListener('click', toggleMenu);
    sectionNavToggle.addEventListener('touchend', toggleMenu);

    // Prevent touch scrolling issues
    sectionNavToggle.addEventListener('touchstart', (e) => {
      e.stopPropagation();
    });

    // Keyboard navigation support
    sectionNavToggle.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        if (sectionNavOpen) {
          closeMenu();
        } else {
          openMenu();
        }
      } else if (e.key === 'Escape' && sectionNavOpen) {
        closeMenu();
        sectionNavToggle.focus();
      }
    });

    // Close section nav when clicking outside
    document.addEventListener('click', (e: MouseEvent) => {
      if (sectionNavOpen && e.target &&
          !sectionNavToggle.contains(e.target as Node) &&
          !sectionNavMenu.contains(e.target as Node)) {
        closeMenu();
      }
    });

    // Global escape key handler for both section nav and mobile menu
    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        if (sectionNavOpen) {
          closeMenu();
          sectionNavToggle.focus();
        } else if (mobileMenuOpen) {
          toggleMobileMenu();
          mobileMenuButton?.focus();
        }
      }
    });

    // Handle section navigation links with enhanced animations and keyboard support
    const sectionNavLinks = sectionNavMenu.querySelectorAll('.section-nav-link');
    sectionNavLinks.forEach((link, index) => {
      // Add hover effects
      link.addEventListener('mouseenter', () => {
        if (sectionNavOpen) {
          (link as HTMLElement).style.transform = 'translateX(5px) scale(1.02)';
        }
      });

      link.addEventListener('mouseleave', () => {
        if (sectionNavOpen) {
          (link as HTMLElement).style.transform = 'translateX(0) scale(1)';
        }
      });

      // Keyboard navigation within menu
      link.addEventListener('keydown', (e) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === 'ArrowDown') {
          keyEvent.preventDefault();
          const nextLink = sectionNavLinks[index + 1] as HTMLElement;
          if (nextLink) {
            nextLink.focus();
          } else {
            // Wrap to first item
            (sectionNavLinks[0] as HTMLElement).focus();
          }
        } else if (keyEvent.key === 'ArrowUp') {
          keyEvent.preventDefault();
          const prevLink = sectionNavLinks[index - 1] as HTMLElement;
          if (prevLink) {
            prevLink.focus();
          } else {
            // Wrap to last item
            (sectionNavLinks[sectionNavLinks.length - 1] as HTMLElement).focus();
          }
        } else if (keyEvent.key === 'Escape') {
          keyEvent.preventDefault();
          closeMenu();
          sectionNavToggle.focus();
        } else if (keyEvent.key === 'Tab') {
          // Allow normal tab behavior but close menu when tabbing out
          if (keyEvent.shiftKey && index === 0) {
            // Shift+Tab on first item - close menu and focus toggle
            keyEvent.preventDefault();
            closeMenu();
            sectionNavToggle.focus();
          } else if (!keyEvent.shiftKey && index === sectionNavLinks.length - 1) {
            // Tab on last item - close menu
            closeMenu();
          }
        }
      });

      // Shared navigation function for both click and touch events
      const handleNavigation = () => {
        // Don't prevent default for navigation links - let them navigate
        // Close the section nav menu with animation
        closeMenu();
      };

      // Add both click and touch event listeners for navigation links
      link.addEventListener('click', handleNavigation);
      link.addEventListener('touchend', handleNavigation);

      // Prevent touch scrolling issues
      link.addEventListener('touchstart', (e) => {
        e.stopPropagation();
      });
    });
  }



  // Mobile menu toggle
  function toggleMobileMenu() {
    mobileMenuOpen = !mobileMenuOpen;

    if (mobileMenuOpen) {
      mobileNavigationMenu?.classList.remove('h-0', 'opacity-0');
      mobileNavigationMenu?.classList.add('h-80', 'py-8', 'opacity-100');
      menuIcon?.classList.add('hidden');
      closeIcon?.classList.remove('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'true');
    } else {
      mobileNavigationMenu?.classList.add('h-0', 'opacity-0');
      mobileNavigationMenu?.classList.remove('h-80', 'py-8', 'opacity-100');
      menuIcon?.classList.remove('hidden');
      closeIcon?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    }
  }

  // Enhanced mobile menu toggle with touch support
  const handleMobileMenuToggle = (e: Event) => {
    e.preventDefault(); // Prevent any default behavior
    toggleMobileMenu();
  };

  // Add both click and touch event listeners for mobile menu button
  mobileMenuButton?.addEventListener('click', handleMobileMenuToggle);
  mobileMenuButton?.addEventListener('touchend', handleMobileMenuToggle);

  // Prevent touch scrolling issues
  mobileMenuButton?.addEventListener('touchstart', (e) => {
    e.stopPropagation();
  });

  // Mobile menu button keyboard support
  mobileMenuButton?.addEventListener('keydown', (e) => {
    const keyEvent = e as KeyboardEvent;
    if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
      keyEvent.preventDefault();
      toggleMobileMenu();
    } else if (keyEvent.key === 'Escape' && mobileMenuOpen) {
      keyEvent.preventDefault();
      toggleMobileMenu();
      mobileMenuButton?.focus();
    }
  });

  // Close mobile menu when clicking on navigation links
  const navLinks = mobileNavigationMenu?.querySelectorAll('a');
  navLinks?.forEach(link => {
    link.addEventListener('click', () => {
      if (mobileMenuOpen) {
        toggleMobileMenu();
      }
    });
  });
</script>
