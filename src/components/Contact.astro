---
// EmailJS integration
---

<section
  id="contact-section"
  class="w-full bg-primary_dark shadow-2xl flex flex-col items-center justify-center pb-14 pt-24"
>
  <div
    id="contact-content"
    class="w-full grid place-items-center max-w-[1480px] gap-8 px-5 mx-auto rounded-lg md:px-12 lg:px-16 xl:px-32 bg-transparent text-gray-100 transition-all duration-1000 opacity-0 translate-y-52"
  >
    <div class="w-full max-w-3xl space-y-3 text-center md:text-left">
      <h2 class="text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold leading-tight">
        Get in touch with me!
      </h2>
      <div class="text-gray-400 text-base sm:text-lg md:text-xl animation-delay">
        Let's discuss how we can collaborate.
      </div>
    </div>
    <form
      id="contact-form"
      class="w-full max-w-3xl space-y-6 ng-untouched ng-pristine ng-valid flex flex-col items-center mt-0 md:mt-20 pb-14"
    >
      <div class="w-full">
        <input
          id="name"
          type="text"
          placeholder="Full name"
          name="name"
          class="w-full min-h-[48px] p-4 placeholder:text-white/40 outline-none text-base sm:text-lg border-b-2 border-white bg-transparent focus:border-sixth transition-colors duration-200"
          autocomplete="name"
        />
        <p id="name-error" class="text-sm sm:text-base invisible text-red-500 mt-1">
          A name is required.
        </p>
      </div>
      <div class="w-full">
        <input
          id="email"
          name="email"
          type="email"
          placeholder="E-mail address"
          class="w-full min-h-[48px] p-4 placeholder:text-white/40 outline-none text-base sm:text-lg border-b-2 border-white bg-transparent focus:border-sixth transition-colors duration-200"
          autocomplete="email"
        />
        <p id="email-error" class="text-sm sm:text-base invisible text-red-500 mt-1">
          A valid email is required.
        </p>
      </div>
      <div class="w-full pb-8 md:pb-14">
        <textarea
          id="message"
          name="message"
          rows="4"
          placeholder="Message"
          class="w-full min-h-[120px] p-4 placeholder:text-white/40 outline-none text-base sm:text-lg border-b-2 border-white bg-transparent h-32 sm:h-40 resize-none focus:border-sixth transition-colors duration-200"
        ></textarea>
        <p id="message-error" class="text-sm sm:text-base invisible text-red-500 mt-1">
          A message is required.
        </p>
      </div>
      <button
        type="submit"
        id="submit-button"
        class="w-full max-w-xs min-h-[48px] px-6 py-4 text-sm sm:text-base md:text-lg tracking-wide rounded-lg text-primary_dark font-bold bg-sixth flex items-center justify-center transition-all duration-300 hover:bg-sixth/90 focus:outline-none focus:ring-2 focus:ring-sixth focus:ring-offset-2 focus:ring-offset-primary_dark disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Send contact message"
      >
        <span id="button-text">Send Message</span>
        <span id="success-text" class="hidden flex gap-2 text-white">
          Sent
          <svg class="w-5 h-5 sm:w-6 sm:h-6" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
        </span>
        <span id="error-text" class="hidden">Something went wrong :(</span>
        <span id="loading-spinner" class="hidden w-5 h-5 sm:w-6 sm:h-6 animate-spin border-2 border-white rounded-full border-t-zinc-500"></span>
      </button>
    </form>
  </div>
</section>

<script>
  let isLoading = false;
  let isSuccess = false;
  let isError = false;

  const contactContent = document.getElementById('contact-content');
  const contactForm = document.getElementById('contact-form');
  const nameInput = document.getElementById('name') as HTMLInputElement;
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const messageInput = document.getElementById('message') as HTMLTextAreaElement;
  const submitButton = document.getElementById('submit-button');
  const buttonText = document.getElementById('button-text');
  const successText = document.getElementById('success-text');
  const errorText = document.getElementById('error-text');
  const loadingSpinner = document.getElementById('loading-spinner');
  const nameError = document.getElementById('name-error');
  const emailError = document.getElementById('email-error');
  const messageError = document.getElementById('message-error');

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.remove('opacity-0', 'translate-y-52');
        entry.target.classList.add('opacity-100', 'translate-y-0');
      }
    });
  });

  if (contactContent) {
    observer.observe(contactContent);
  }

  function validateForm() {
    let isValid = true;

    nameError?.classList.add('invisible');
    emailError?.classList.add('invisible');
    messageError?.classList.add('invisible');

    if (!nameInput.value || nameInput.value.length < 4 || nameInput.value.length > 50) {
      nameError?.classList.remove('invisible');
      isValid = false;
    }

    const emailRegex = /\S+@\S+\.\S+/;
    if (!emailInput.value || !emailRegex.test(emailInput.value) || emailInput.value.length < 8 || emailInput.value.length > 70) {
      emailError?.classList.remove('invisible');
      isValid = false;
    }

    if (!messageInput.value || messageInput.value.length < 3 || messageInput.value.length > 300) {
      messageError?.classList.remove('invisible');
      isValid = false;
    }

    return isValid;
  }

  function updateButtonState(state: 'default' | 'loading' | 'success' | 'error') {
    buttonText?.classList.add('hidden');
    successText?.classList.add('hidden');
    errorText?.classList.add('hidden');
    loadingSpinner?.classList.add('hidden');

    submitButton?.classList.remove('bg-sixth', 'bg-text', 'bg-red-500');

    switch (state) {
      case 'default':
        buttonText?.classList.remove('hidden');
        submitButton?.classList.add('bg-sixth');
        submitButton?.removeAttribute('disabled');
        break;
      case 'loading':
        loadingSpinner?.classList.remove('hidden');
        submitButton?.classList.add('bg-sixth');
        submitButton?.setAttribute('disabled', 'true');
        break;
      case 'success':
        successText?.classList.remove('hidden');
        submitButton?.classList.add('bg-text');
        submitButton?.setAttribute('disabled', 'true');
        break;
      case 'error':
        errorText?.classList.remove('hidden');
        submitButton?.classList.add('bg-red-500');
        submitButton?.setAttribute('disabled', 'true');
        break;
    }
  }

  function handleInputChange() {
    if (isSuccess || isError) {
      isSuccess = false;
      isError = false;
      updateButtonState('default');
    }

    nameError?.classList.add('invisible');
    emailError?.classList.add('invisible');
    messageError?.classList.add('invisible');
  }

  nameInput?.addEventListener('input', handleInputChange);
  emailInput?.addEventListener('input', handleInputChange);
  messageInput?.addEventListener('input', handleInputChange);

  contactForm?.addEventListener('submit', async (event) => {
    event.preventDefault();

    if (isLoading || isSuccess || isError) return;

    if (!validateForm()) return;

    isLoading = true;
    updateButtonState('loading');

    try {
      const emailjs = await import('@emailjs/browser');

      await emailjs.send(
        'service_o40d0rj',
        'template_uts0ynn',
        {
          sender_name: nameInput.value,
          sender_email: emailInput.value,
          received_message: messageInput.value,
        },
        'yEZEiEI9O1vQnZxUN'
      );

      isLoading = false;
      isSuccess = true;
      updateButtonState('success');

      nameInput.value = '';
      emailInput.value = '';
      messageInput.value = '';
      
    } catch (error) {
      console.error('EmailJS error:', error);
      isLoading = false;
      isError = true;
      updateButtonState('error');
    }
  });
</script>
