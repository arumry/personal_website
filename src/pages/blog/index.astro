---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

// Type for blog post entries
type BlogPost = CollectionEntry<'blog'>;

// Get all blog posts and sort by date (newest first)
const allPosts = await getCollection('blog');
const publishedPosts = allPosts
  .filter((post: BlogPost) => !post.data.draft)
  .sort((a: BlogPost, b: BlogPost) => b.data.date.valueOf() - a.data.date.valueOf());

const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'UTC'
  }).format(date);
};
---

<BaseLayout title="Blog - Aaron Rumery" description="Technical blog posts about software engineering, architecture, and development" showSectionNav={false}>
  <!-- Blog Header -->
  <section class="w-full px-4 sm:px-6 md:px-8 lg:px-12 pt-8 sm:pt-12 md:pt-16 pb-12 md:pb-16">
        <div class="text-center mb-12 md:mb-16">
          <h1 class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-4 sm:mb-6">
            <span class="text-zinc-500">&#47;&#47;</span> Blog
          </h1>
          <p class="text-base sm:text-lg md:text-xl text-zinc-300 max-w-3xl mx-auto leading-relaxed px-4 sm:px-0">
            Technical insights, architectural patterns, and thoughts on software engineering
          </p>
        </div>
      
      <!-- Blog Posts Grid -->
      {publishedPosts.length > 0 ? (
        <div class="grid gap-8 md:gap-12">
          {publishedPosts.map((post: BlogPost, index: number) => (
            <article 
              class={`blog-post-card group transition-all duration-1000 ${index === 0 ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-52'}`}
              data-index={index}
            >
              <div class="bg-primary_light border border-zinc-700 rounded-lg p-4 sm:p-6 md:p-8 hover:border-secondary transition-all duration-300 shadow-card hover:shadow-xxxl">
                <!-- Post Header -->
                <header class="mb-4">
                  <div class="flex flex-wrap items-center gap-4 text-sm text-zinc-400 mb-4">
                    <time datetime={post.data.date.toISOString()} class="flex items-center">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                      </svg>
                      {formatDate(post.data.date)}
                    </time>
                    
                    {post.data.tags && post.data.tags.length > 0 && (
                      <div class="flex items-center flex-wrap gap-2">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.99 1.99 0 013 12V7a4 4 0 014-4z"></path>
                        </svg>
                        {post.data.tags.map((tag: string) => (
                          <span class="px-2 py-1 bg-primary text-tertiary text-xs rounded font-mono">
                            {tag}
                          </span>
                        ))}
                      </div>
                    )}
                  </div>
                  
                  <h2 class="text-xl sm:text-2xl md:text-3xl font-bold text-white mb-3 group-hover:text-secondary transition-colors duration-300">
                    <a href={`/blog/${post.slug}`} class="block">
                      {post.data.title}
                    </a>
                  </h2>
                  
                  {post.data.description && (
                    <p class="text-zinc-300 text-base sm:text-lg leading-relaxed">
                      {post.data.description}
                    </p>
                  )}
                </header>
                
                <!-- Read More Link -->
                <footer class="pt-4 border-t border-zinc-700">
                  <a 
                    href={`/blog/${post.slug}`}
                    class="inline-flex items-center text-secondary hover:text-tertiary transition-colors duration-300 font-mono text-sm"
                  >
                    Read Article
                    <svg class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                </footer>
              </div>
            </article>
          ))}
        </div>
      ) : (
        <!-- Empty State -->
        <div class="text-center py-16">
          <div class="text-6xl mb-4">üìù</div>
          <h2 class="text-2xl font-bold text-white mb-4">No Posts Yet</h2>
          <p class="text-zinc-400">Check back soon for technical insights and articles!</p>
        </div>
      )}
  </section>
</BaseLayout>

<script>
  // Animate blog posts on scroll
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.remove('opacity-0', 'translate-y-52');
        entry.target.classList.add('opacity-100', 'translate-y-0');
      }
    });
  }, observerOptions);

  // Observe all blog post cards except the first one (which is already visible)
  const blogPosts = document.querySelectorAll('.blog-post-card[data-index]:not([data-index="0"])');
  blogPosts.forEach(post => observer.observe(post));
</script>

<style>
  .blog-post-card {
    transition: opacity 1000ms ease-out, transform 1000ms ease-out;
  }
</style>
